vector<int> primes_up_to(int x) {
	vector<bool> sieve;
	vector<int> primes;
	for (int i = 2; i <= x; i++) {
		if (sieve[i]) continue;
		primes.push_back(i);
		for (int j = i * 2; j <= x; j += i) {
			sieve[j] = 1;
		}
	}
	return primes;
}

unsigned ll _mulmod(unsigned ll a, unsigned ll b, unsigned ll m) {
	unsigned ll res = 0;
	while (b) {
		if (b&1) res = (res+a)%m;
		a = (a+a)%m;
		b >>= 1;
	}
	return res;
}

unsigned ll _powmod(unsigned ll a, unsigned ll b, unsigned ll m) {
	unsigned ll res = 1;
	while (b) {
		if (b&1) res = _mulmod(res, a, m);
		a = _mulmod(a, a, m);
		b >>= 1;
	}
	return res;
}

bool is_prime(unsigned ll n) {
	if (n < 2) return false;
	// Miller-Rabin primality test, accurate up to 2^64
	unsigned ll d = n-1, s = 0;
	while (d % 2 == 0) {
		d /= 2;
		s++;
	}

	for (ll a : {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41}) {
		if (a > n-2) break;
		ll x = _powmod(a, d, n);
		ll y = 0;
		for (int r = 0; r < s; r++) {
			y = _mulmod(x, x, n);
			if (y == 1 && x != 1 && x != n-1) return false;
			x = y;
		}
		if (y != 1) return false;
	}
	return true;
}
